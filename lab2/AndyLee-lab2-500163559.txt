#######################
# MODULE FILE
#######################

defmodule Lab2_1 do
    def powers(x) when not is_number(x), do: :error
    def powers(x), do: :math.pow(x,2)

    def powers(x,y) when not is_number(x) or not is_number(y) or (x < 0 and not is_integer(y)) , do: :error
    def powers(x,y), do: :math.pow(x,y)
    def powers(), do: 0
    
end

defmodule Lab2_2 do
    def all(x) do
        cond do
            not is_list(x) ->
                :err_not_list
            Enum.any?(x,fn(n)-> not is_integer(n) end) ->
                :err_invalid_value
            True ->
                :success
                [h | rest] = x
                add_myself(rest, h)
        end               
    end

    def even(x) do
        cond do
            not is_list(x) ->
                :err_not_list
            Enum.any?(x,fn(n)-> not is_integer(n) end) ->
                :err_invalid_value
            Enum.any?(x,fn(n)-> :math.fmod(n,2)>0 end) ->
                :err_odd_integer_detected
            True ->
                :success
                [h | rest] = x
                add_myself(rest, h)
        end               
    end

    def odd(x) do
        cond do
            not is_list(x) ->
                :err_not_list
            Enum.any?(x,fn(n)-> not is_integer(n) end) ->
                :err_invalid_value
            Enum.any?(x,fn(n)-> not (:math.fmod(n,2)>0) end) ->
                :err_even_integer_detected
            True ->
                :success
                [h | rest] = x
                add_myself(rest, h)
        end               
    end

    def add_myself(x,y) do
        if (length x) > 0 do
            [h | rest] = x
            add_myself(rest, y+h)
        else
            y
        end
    end

    
end

defmodule Lab2_3 do
    def enum_lab3(x, y) do        
        cond do
            not is_list(x) ->
                :err_not_list
            (length x) == 0 ->
                x
            True ->
                :success
                [h | rest] = x
                if is_number(h) do
                    [y.(h)|enum_lab3(rest,y)]
                else
                    [(h)|enum_lab3(rest,y)]
                end
        end
    end
end

#######################
# TEST FILE
#######################

IO.puts "*** POWERS"
IO.puts Lab2_1.powers()
IO.puts Lab2_1.powers(0)
IO.puts Lab2_1.powers(0,0)
IO.puts Lab2_1.powers(1)
IO.puts Lab2_1.powers(3,2)
IO.puts Lab2_1.powers(3,2.12)
IO.puts Lab2_1.powers(2.12,3)
IO.puts Lab2_1.powers(2.123,-3)
IO.puts Lab2_1.powers("base",2.12)
IO.puts Lab2_1.powers(-3,2.12)
IO.puts Lab2_1.powers("asdf")

IO.puts "\n*** ANY FUNCTION"
IO.puts Lab2_2.all(12313)
IO.puts Lab2_2.all([12,1.123,4124])
IO.puts Lab2_2.all([12,"123",4124])
IO.puts Lab2_2.all([12,[1,2,3],4124])
IO.puts Lab2_2.all([1,2,3,4,5,6,7,8])
IO.puts Lab2_2.all([1,2])
IO.puts Lab2_2.all([1])
IO.puts "\n*** EVEN FUNCTION"
IO.puts Lab2_2.even([12,"123",4124])
IO.puts Lab2_2.even([12,[1,2,3],4124])
IO.puts Lab2_2.even([1,2])
IO.puts Lab2_2.even([2,2,4,6,12356])
IO.puts "\n*** ODD FUNCTION"
IO.puts Lab2_2.odd([12,"123",4124])
IO.puts Lab2_2.odd([12,[1,2,3],4124])
IO.puts Lab2_2.odd([1,2])
IO.puts Lab2_2.odd([1,15121,125129,1245])

IO.puts "\n*** QUESTION 3"
IO.inspect Lab2_3.enum_lab3([1,2,3,4],fn(n)->n+1 end)
IO.inspect Lab2_3.enum_lab3([1,2,3,4],fn(n)->n*2 end)
IO.inspect Lab2_3.enum_lab3([],fn(n)->n*3 end)
IO.inspect Lab2_3.enum_lab3([1],fn(n)->n*3 end)
IO.inspect Lab2_3.enum_lab3(2,fn(n)->n*3 end)
IO.inspect Lab2_3.enum_lab3([1,2,"lorem",4],fn(n)->n+1 end)
IO.inspect Lab2_3.enum_lab3(["lorem0","lorem","lorem2"],fn(n)->n+1 end)
